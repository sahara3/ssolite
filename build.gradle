import io.franzbecker.gradle.lombok.task.DelombokTask

buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
        mavenCentral()
    }

    dependencies {
        classpath 'io.franzbecker:gradle-lombok:1.10'
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.5.9.RELEASE'
    }
}

// ===================================================================
//  Common Settings
// ===================================================================
allprojects {
    repositories {
        mavenCentral()
    }

    apply plugin: 'io.spring.dependency-management'

    dependencyManagement {
        dependencies {
            dependency 'org.projectlombok:lombok:1.16.18'
            dependency 'org.slf4j:slf4j-api:1.7.25'
            dependency 'commons-logging:commons-logging:1.2'
            dependency 'javax.servlet:javax.servlet-api:3.1.0'
            dependency 'javax.validation:validation-api:2.0.0.Final'
            dependency 'org.springframework:spring-web:4.3.13.RELEASE'
            dependency 'org.springframework.security:spring-security-web:4.2.3.RELEASE'
            dependency 'org.springframework.security:spring-security-config:4.2.3.RELEASE'
            dependency 'org.springframework.session:spring-session:1.3.1.RELEASE'
            dependency 'org.springframework.boot:spring-boot:1.5.9.RELEASE'
            dependency 'org.springframework.boot:spring-boot-autoconfigure:1.5.9.RELEASE'
        }
    }
}

subprojects { subproject ->
    plugins.withId('java') {
        subproject.apply plugin: 'io.franzbecker.gradle-lombok'

        dependencies {
            compileOnly 'org.projectlombok:lombok'
        }

        def encoding = 'UTF-8'

        sourceCompatibility = 1.8
        targetCompatibility = 1.8

        tasks.withType(AbstractCompile) {
            options.encoding = encoding
            options.compilerArgs += ['-Xlint:all', '-Xlint:-processing', '-Xlint:-fallthrough',
                                     '-parameters']
        }

        task delombok(type: DelombokTask, dependsOn: compileJava) {
            ext.outputDir = file("${buildDir}/delombok")
            outputs.dir(outputDir)
            sourceSets.main.java.srcDirs.each {
                inputs.dir(it)
                args(it, '-d', outputDir)
            }
        }

        tasks.withType(Javadoc) {
            options.encoding = encoding
            options.charSet = encoding

            dependsOn delombok
            source = delombok.outputDir
        }
    }

    plugins.withId('eclipse') {
        eclipse {
            project {
                name = path.substring(1).replaceAll(':', '-')
                natures 'org.eclipse.buildship.core.gradleprojectnature'
                buildCommand 'org.eclipse.buildship.core.gradleprojectbuilder'
            }

            classpath {
                downloadSources = true
                downloadJavadoc = true

                file {
                    whenMerged { classpath ->
                        classpath.entries.findAll { it.kind == 'lib' }*.exported = true
                    }
                }
            }
        }

        tasks.eclipse {
            dependsOn cleanEclipse
            doLast {
                def settings_dir = file('.settings')
                if (settings_dir.exists()) {
                    def project_dir = (['..'] * project.depth).join('/')
                    file("${settings_dir}/org.eclipse.buildship.core.prefs").append("""
                        connection.gradle.distribution=GRADLE_DISTRIBUTION(WRAPPER)
                        connection.project.dir=${project_dir}
                        eclipse.preferences.version=1
                    """.stripIndent())
                }
            }
        }

        tasks.cleanEclipse {
            doLast {
                delete '.settings'
            }
        }

        tasks.clean {
            doLast {
                delete 'bin'
            }
        }
    }
}

// ===================================================================
//  ssolite
// ===================================================================
project(':ssolite') {
    group = 'com.github.sahara3'
    version = '0.0.2.SNAPSHOT'

    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'eclipse'

    dependencies {
        compileOnly 'javax.servlet:javax.servlet-api'
        compile 'javax.validation:validation-api'
        compile 'org.springframework:spring-web'
        compile 'org.springframework.security:spring-security-web'
        compile 'org.springframework.security:spring-security-config'
        compile 'org.springframework.boot:spring-boot'
        compile 'org.springframework.boot:spring-boot-autoconfigure'
        compile 'org.slf4j:slf4j-api'
        runtime 'commons-logging:commons-logging'
        runtime 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    }

    jar {
        manifest {
            attributes('Implementation-Title': name,
                       'Implementation-Version': version)
        }
    }

    // ---------------------------------------------------------------
    // Maven Publising
    // ---------------------------------------------------------------
    configurations {
        deployerJars
    }

    dependencies {
        deployerJars 'org.apache.maven.wagon:wagon-ssh:2.2'
    }

    uploadArchives {
        repositories.mavenDeployer {
            configuration = configurations.deployerJars
            repository(url: privateRepositoryUrl) {
                authentication(userName: privateRepositoryUsername,
                               password: privateRepositoryPassword)
            }
        }
    }

    task sourcesJar(type: Jar, dependsOn:classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn:javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}

// ===================================================================
//  Sample Server and Client
// ===================================================================
project(':sample-server') {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'org.springframework.boot'

    dependencies {
        compile project(':ssolite')
        compile 'javax.validation:validation-api'
        compile 'org.springframework.boot:spring-boot-starter-web'
        compile 'org.springframework.boot:spring-boot-starter-thymeleaf'
        compile 'org.springframework.boot:spring-boot-starter-security'
        compile 'org.springframework.session:spring-session'
        compile 'org.thymeleaf.extras:thymeleaf-extras-springsecurity4'
        runtime 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    }
}

project(':sample-client') {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'org.springframework.boot'

    dependencies {
        compile project(':ssolite')
        compile 'javax.validation:validation-api'
        compile 'org.springframework.boot:spring-boot-starter-web'
        compile 'org.springframework.boot:spring-boot-starter-thymeleaf'
        compile 'org.springframework.boot:spring-boot-starter-security'
        //compile 'org.springframework.session:spring-session'
        compile 'org.thymeleaf.extras:thymeleaf-extras-springsecurity4'
        runtime 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    }
}

import com.github.spotbugs.snom.Confidence
import com.github.spotbugs.snom.Effort
import com.github.spotbugs.snom.SpotBugsTask
import org.springframework.boot.gradle.plugin.SpringBootPlugin

buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
        mavenCentral()
    }

    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:3.0.13'
        classpath 'io.spring.gradle:dependency-management-plugin:1.1.4'
        classpath 'com.github.spotbugs.snom:spotbugs-gradle-plugin:6.0.9'
        classpath 'com.github.sahara3:gradle-tomcat-runner-plugin:0.3.0'
    }
}

// ===================================================================
//  Common Settings
// ===================================================================
configure(allprojects) {
    repositories {
        mavenCentral()
    }

    apply plugin: 'io.spring.dependency-management'

    dependencyManagement {
        imports {
            mavenBom SpringBootPlugin.BOM_COORDINATES
        }

        dependencies {
            dependency 'org.projectlombok:lombok:1.18.32'

            dependency 'jakarta.servlet:jakarta.servlet-api:6.0.0'
            dependency 'javax.servlet:javax.servlet-api:3.1.0'
            dependency 'jakarta.validation:jakarta.validation-api:3.0.2'
            dependency 'com.google.code.findbugs:jsr305:3.0.2'
            dependency 'org.dmfs:rfc3986-uri:0.8.1'

            dependency 'com.squareup.okhttp3:okhttp:4.12.0'
            dependency 'org.jetbrains.kotlin:kotlin-stdlib:1.9.23'

            dependency 'org.apache.struts:struts2-core:6.3.0.2'
        }
    }

    tasks.register('configurations') {
        group = 'help'
        description = "Displays all configurations declared in project '${project.path}'."
        doLast {
            println '-' * 60
            println "Project ${project.path}"
            println '-' * 60
            configurations.each { configuration ->
                println ''
                println "- ${configuration.name}"
                if (!configuration.extendsFrom.empty) {
                    println "  - extends from: ${configuration.extendsFrom.collect { it.name }.join(', ')}"
                }
            }
        }
    }
}

configure(subprojects) {
    apply plugin: 'java'
    apply plugin: 'com.github.spotbugs'

    ext {
        javaEncoding = 'UTF-8'
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = javaEncoding
        options.compilerArgs += ['-Xlint:all', '-Xlint:-processing', '-Xlint:-fallthrough', '-parameters']
    }

    configurations {
        javadocLink {
            extendsFrom apiElements
        }
    }

    tasks.withType(Javadoc).configureEach {
        options.charSet = javaEncoding
        options.encoding = javaEncoding
        options.docEncoding = javaEncoding
        options.links 'https://docs.oracle.com/en/java/javase/17/docs/api/'
        options.addBooleanOption 'Xdoclint:-missing', true
    }

    tasks.withType(Javadoc).configureEach { task ->
        ['Host', 'Port', 'User', 'Password'].each {
            def key = "proxy${it}"
            def value = System.properties.get("http.${key}")
            if (value) {
                task.options.jFlags "-D${key}=${value}"
            }
        }

        task.doFirst {
            def urlPrefix = 'https://javadoc.io/doc'

            configurations.javadocLink.resolvedConfiguration.resolvedArtifacts.findAll {
                !(it.id.componentIdentifier instanceof ProjectComponentIdentifier)
            }.collect {
                it.moduleVersion.id
            }.findAll {
                it.group != 'org.jetbrains.kotlin' &&
                        it.module.name != 'okhttp' && it.module.name != 'okio-jvm'
            }.each {
                task.options.links "${urlPrefix}/${it.group}/${it.name}/${it.version}/"
            }

            configurations.javadocLink.resolvedConfiguration.resolvedArtifacts.findAll {
                it.id.componentIdentifier instanceof ProjectComponentIdentifier
            }.each {
                def m = it.moduleVersion.id
                def url = "${urlPrefix}/${m.group}/${m.name}/${m.version}/"
                def dir = project(it.id.componentIdentifier.projectPath).tasks.javadoc.destinationDir
                task.options.linksOffline url, dir.path
            }
        }
    }

    tasks.clean.doLast {
        project.delete 'bin'
    }

    spotbugs {
        ignoreFailures = false
        effort = Effort.valueOf('MAX')
        reportLevel = Confidence.valueOf('LOW')
    }

    spotbugsTest.enabled = false

    tasks.withType(SpotBugsTask).configureEach {
        reports {
            xml.required = false
            html.required = true
        }
    }

    if (file('spotbugs-exclude.xml').exists()) {
        spotbugs {
            excludeFilter = file('spotbugs-exclude.xml')
        }
    }
}

// ===================================================================
//  ssolite
// ===================================================================
def mainProjects = subprojects.findAll { it.path.startsWith(':ssolite-') }

configure(mainProjects) {
    group = 'com.github.sahara3'
    version = '2.0.0-SNAPSHOT'

    ext {
        isSnapshotVersion = version.endsWith('-SNAPSHOT')
    }

    tasks.register('showVersion') {
        doLast {
            println version
        }
    }

    apply plugin: 'java-library'
    apply plugin: 'jacoco'

    configurations {
        providedApi
        optionalImplementation
    }

    sourceSets {
        main {
            compileClasspath += configurations.providedApi
            compileClasspath += configurations.optionalImplementation
        }
        test {
            compileClasspath += configurations.providedApi
            compileClasspath += configurations.optionalImplementation
        }
    }

    dependencies {
        providedApi 'jakarta.servlet:jakarta.servlet-api'
        providedApi 'javax.servlet:javax.servlet-api'
        compileOnly 'com.google.code.findbugs:jsr305'
        implementation 'org.slf4j:slf4j-api'

        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'junit', module: 'junit'
        }
        testImplementation 'org.junit.jupiter:junit-jupiter-api'
        testImplementation 'org.junit.jupiter:junit-jupiter-params'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
        testRuntimeOnly 'jakarta.servlet:jakarta.servlet-api'
        testRuntimeOnly 'javax.servlet:javax.servlet-api'
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    jar {
        manifest {
            attributes('Implementation-Title': name,
                       'Implementation-Version': archiveVersion)
        }
    }

    test {
        useJUnitPlatform()
        finalizedBy(jacocoTestReport)
    }

    jacocoTestReport {
        reports {
            xml.required = false
            csv.required = false
            html.required = true
        }
    }

    // ---------------------------------------------------------------
    // Maven Publishing
    // ---------------------------------------------------------------
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    tasks.withType(PublishToMavenRepository).configureEach {
        dependsOn test
    }

    publishing {
        publications {
            ssolite(MavenPublication) {
                from components.java

                versionMapping {
                    usage('java-api') {
                        fromResolutionResult()
                    }
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                }

                pom {
                    name = project.name.split('-').collect {
                         (it == 'ssolite') ? 'SSOLite' : it.capitalize() }.join(' ')
                    url = 'https://github.com/sahara3/ssolite'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'https://www.apache.org/licenses/LICENSE-2.0'
                        }
                    }
                    developers {
                        developer {
                            id = 'sahara3'
                            name = 'Soichiro SAHARA'
                            email = 'soichiro.sahara@gmail.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com/sahara3/ssolite.git'
                        developerConnection = 'scm:git:git://github.com/sahara3/ssolite.git'
                        url = 'https://github.com/sahara3/ssolite'
                    }

                    withXml {
                        // providedApi -> provided scope
                        asNode().dependencies.'*'.findAll {
                            project.configurations.providedApi.allDependencies.find { dep ->
                                dep.name == it.artifactId.text()
                            }
                        }.each {
                            it.scope*.value = 'provided'
                        }

                        // optionalImplementation -> optional=true
                        asNode().dependencies.'*'.findAll {
                            project.configurations.optionalImplementation.allDependencies.find { dep ->
                                    dep.name == it.artifactId.text()
                            }
                        }.each {
                            it.appendNode('optional').value = 'true'
                        }
                    }
                }
            }
        }
    }

    afterEvaluate {
        publishing.publications.ssolite.pom.description = description
    }

    if (isSnapshotVersion) {
        def mavenPrivateUrl = properties.get('maven.private.url', null)
        if (mavenPrivateUrl != null) {
            publishing.repositories {
                maven {
                    url mavenPrivateUrl
                }
            }
            if (!mavenPrivateUrl.startsWith('file://')) {
                def mavenPrivateUsername = properties.get('maven.private.username')
                def mavenPrivatePassword = properties.get('maven.private.password')
                publishing.repositories.maven.credentials {
                    username mavenPrivateUsername
                    password mavenPrivatePassword
                }
            }
        }
    } else {
        def mavenSonatypeUrl = properties.get('maven.sonatype.url', null)
        if (mavenSonatypeUrl != null) {
            def mavenSonatypeUsername = properties.get('maven.sonatype.username')
            def mavenSonatypePassword = properties.get('maven.sonatype.password')
            publishing.repositories {
                maven {
                    name = 'sonatype'
                    url = mavenSonatypeUrl
                    credentials {
                        username mavenSonatypeUsername
                        password mavenSonatypePassword
                    }
                }
            }
        }
    }

    def signingKey = properties.get('SIGNING_KEY', null)
    def signingPassword = properties.get('SIGNING_PASSWORD', null)
    def signingKeyId = properties.get('SIGNING_KEY_ID', null)
    signing {
        sign publishing.publications.ssolite

        if (signingKey != null && signingPassword != null) {
            if (signingKeyId != null) {
                useInMemoryPgpKeys signingKeyId, signingKey, signingPassword
            } else {
                useInMemoryPgpKeys signingKey, signingPassword
            }
        }
    }
}

configure(project(':ssolite-core')) {
    description = 'A lightweight single sign on library (core module)'

    dependencies {
        compileOnly 'org.jetbrains.kotlin:kotlin-stdlib'
        implementation 'org.dmfs:rfc3986-uri'
        optionalImplementation 'com.squareup.okhttp3:okhttp'
        optionalImplementation 'com.fasterxml.jackson.core:jackson-databind'

        testImplementation 'org.springframework.security:spring-security-web'
    }
}

configure(project(':ssolite-spring')) {
    description = 'A lightweight single sign on library (for Spring)'

    dependencies {
        api project(':ssolite-core')
        api 'org.springframework.security:spring-security-core'
        api 'org.springframework.security:spring-security-web'
        api 'org.springframework.security:spring-security-config'
        api 'com.fasterxml.jackson.core:jackson-core'
        api 'com.fasterxml.jackson.core:jackson-databind'
        api 'com.fasterxml.jackson.core:jackson-annotations'
        implementation 'org.springframework:spring-core'
        implementation 'org.springframework:spring-web'
        optionalImplementation 'org.springframework.boot:spring-boot-starter-actuator'
    }
}

configure(project(':ssolite-spring-boot-autoconfigure')) {
    description = 'A lightweight single sign on library (auto-configuration for Spring Boot)'

    dependencies {
        implementation project(':ssolite-core')
        implementation project(':ssolite-spring')
        implementation 'org.springframework:spring-core'
        implementation 'org.springframework:spring-context'
        implementation 'org.springframework.boot:spring-boot'
        implementation 'org.springframework.boot:spring-boot-autoconfigure'
        implementation 'org.springframework.security:spring-security-config'

        compileOnly 'org.springframework.boot:spring-boot-configuration-processor'
    }
}

configure(project(':ssolite-spring-boot-starter')) {
    description = 'A lightweight single sign on library (starter for Spring Boot)'

    dependencies {
        api project(':ssolite-core')
        api project(':ssolite-spring')
        api project(':ssolite-spring-boot-autoconfigure')
    }
}

// ===================================================================
//  Sample Server and Client
// ===================================================================
def sampleSpringProjects = subprojects.findAll {
    it.path.startsWith(':sample-') && it.path.endsWith('-spring')
}

def sampleStrutsProjects = subprojects.findAll {
    it.path.startsWith(':sample-') && it.path.endsWith('-struts2')
}

def allSampleProjects = sampleSpringProjects + sampleStrutsProjects

configure(allSampleProjects) {
    dependencies {
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'
        compileOnly 'com.google.code.findbugs:jsr305'

        implementation 'jakarta.validation:jakarta.validation-api'
    }

    tasks.withType(Javadoc).configureEach {
        enabled = false
    }
}

configure(sampleSpringProjects) {
    apply plugin: 'org.springframework.boot'

    dependencies {
        implementation project(':ssolite-spring-boot-starter')
        implementation 'jakarta.servlet:jakarta.servlet-api'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
        implementation 'org.slf4j:slf4j-api'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
    }

    bootRun {
        systemProperty 'java.net.preferIPv4Stack', 'true'
    }
}

configure(project(':sample-server-spring')) {
    dependencies {
        implementation 'org.springframework.session:spring-session-core'
    }
}

configure(project(':sample-client-spring')) {
    // nothing to add.
}

configure(sampleStrutsProjects) {
    apply plugin: 'war'
    apply plugin: 'com.github.sahara3.tomcat-runner'

    dependencies {
        compileOnly 'javax.servlet:javax.servlet-api'

        implementation project(':ssolite-core')
        implementation 'org.apache.struts:struts2-core'
        implementation 'org.slf4j:slf4j-api'
        runtimeOnly 'org.apache.logging.log4j:log4j-slf4j2-impl'
        runtimeOnly 'org.apache.logging.log4j:log4j-core'

        tomcat 'org.apache.logging.log4j:log4j-slf4j2-impl'
        tomcat 'org.apache.logging.log4j:log4j-core'
        tomcat 'org.slf4j:jul-to-slf4j'
    }
}

configure(project(':sample-client-struts2')) {
    dependencies {
        implementation 'com.squareup.okhttp3:okhttp'
        implementation 'com.fasterxml.jackson.core:jackson-databind'
    }

    // run this on tomcat.
    tomcat {
        version = '9.0.87'
        port = 8081
        webapp(project) {
            contextPath = ''
        }
    }

    tomcatRun {
        systemProperty 'java.net.preferIPv4Stack', 'true'
    }
}

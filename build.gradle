buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
        mavenCentral()
    }

    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.0.0.RELEASE'
        classpath 'org.akhikhl.gretty:gretty:2.0.0'
    }
}

// ===================================================================
//  Common Settings
// ===================================================================
allprojects {
    repositories {
        mavenCentral()
    }

    apply plugin: 'io.spring.dependency-management'

    dependencyManagement {
        imports {
            mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
        }

        dependencies {
            dependency 'org.projectlombok:lombok:1.18.10'

            dependency 'javax.servlet:javax.servlet-api:3.1.0'
            dependency 'javax.validation:validation-api:2.0.0.Final'

            dependency 'com.squareup.okhttp3:okhttp:3.10.0'

            dependency 'org.apache.struts:struts2-core:2.5.14.1'
        }
    }
}

subprojects { subproject ->
    plugins.withId('java') {
        subproject.apply plugin: 'eclipse'

        dependencies {
            compileOnly 'org.projectlombok:lombok'
            testCompileOnly 'org.projectlombok:lombok'
        }


        ext {
            javaEncoding = 'UTF-8'
            eclipseFormatterXml = file("${rootDir}/eclipse/formatter.xml")
        }

        sourceCompatibility = 1.8
        targetCompatibility = 1.8

        tasks.withType(AbstractCompile) {
            options.encoding = javaEncoding
            options.compilerArgs += ['-Xlint:all', '-Xlint:-processing', '-Xlint:-fallthrough',
                                     '-parameters']
        }

        tasks.withType(Javadoc) {
            options.encoding = javaEncoding
            options.charSet = javaEncoding
            options.links 'http://docs.oracle.com/javase/8/docs/api/'
        }

        tasks.clean {
            doLast {
                project.delete 'bin'
            }
        }

        eclipse {
            project {
                name = path.substring(1).replaceAll(':', '-')
            }

            classpath {
                downloadSources = true
                downloadJavadoc = true
            }

            jdt {
                file {
                    withProperties { properties ->
                        def profiles = new XmlSlurper().parse(eclipseFormatterXml)
                        profiles.profile.setting.each { setting ->
                            properties.setProperty("${setting.@id}", "${setting.@value}")
                        }
                    }
                }
            }
        }

        tasks.eclipse.doLast {
            def settingsDir = project.file('.settings')
            if (!settingsDir.exists()) {
                return
            }

            def update = { name, params ->
                def properties = new Properties()
                def settingFile = project.file("${settingsDir}/${name}")
                if (settingFile.exists()) {
                    settingFile.withReader { r -> properties.load(r) }
                }
                else {
                    properties.setProperty('eclipse.preferences.version', '1')
                }

                params.each { k, v ->
                    properties.setProperty(k, v)
                }
                settingFile.withWriter { w -> properties.store(w, '') }
            }

            update('org.eclipse.core.runtime.prefs', [
                'line.separator': '\\n',
            ])
            update('org.eclipse.core.resources.prefs', [
                'encoding/<project>': javaEncoding,
            ])

            def profiles = new XmlSlurper().parse(eclipseFormatterXml)
            update('org.eclipse.jdt.ui.prefs', [
                'formatter_settings_version': "${profiles.profile.@version}",
                'org.eclipse.jdt.ui.ignorelowercasenames': 'true',
                'org.eclipse.jdt.ui.importorder': 'java;javax;org;com;',
                'org.eclipse.jdt.ui.ondemandthreshold': '99',
                'org.eclipse.jdt.ui.staticondemandthreshold': '99',
            ])
        }

        tasks.cleanEclipse.doLast {
            project.delete '.settings', '.classpath', '.project'
        }
    }
}

// ===================================================================
//  ssolite
// ===================================================================
def mainProjects = subprojects.findAll { it.path.startsWith(':ssolite') }

configure(mainProjects) {
    group = 'com.github.sahara3'
    version = '1.0.0-SNAPSHOT'

    apply plugin: 'java'
    apply plugin: 'eclipse'

    dependencies {
        compileOnly 'javax.servlet:javax.servlet-api'
        compile 'org.springframework:spring-web'
        compile 'org.springframework.security:spring-security-web'
        compile 'org.springframework.security:spring-security-config'
        compile 'org.springframework.boot:spring-boot'
        compile 'org.springframework.boot:spring-boot-autoconfigure'
        compile 'org.slf4j:slf4j-api'
    }

    jar {
        manifest {
            attributes('Implementation-Title': name,
                       'Implementation-Version': version)
        }
    }

    // ---------------------------------------------------------------
    // Maven Publising
    // ---------------------------------------------------------------
    apply plugin: 'maven'

    configurations {
        deployerJars
    }

    dependencies {
        deployerJars 'org.apache.maven.wagon:wagon-ssh:2.2'
    }

    uploadArchives {
        repositories.mavenDeployer {
            configuration = configurations.deployerJars
            repository(url: privateRepositoryUrl) {
                authentication(userName: privateRepositoryUsername,
                               password: privateRepositoryPassword)
            }
        }
    }

    task sourceJar(type: Jar, dependsOn:classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn:javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourceJar
        archives javadocJar
    }
}

// ===================================================================
//  Sample Server and Client
// ===================================================================
def sampleProjects = subprojects.findAll { it.path.startsWith(':sample') }

configure(sampleProjects) {
    apply plugin: 'java'
    apply plugin: 'eclipse'

    dependencies {
        compileOnly 'org.projectlombok:lombok'
        testCompileOnly 'org.projectlombok:lombok'

        compile 'javax.validation:validation-api'
        compile project(':ssolite')
    }

    task delombok(type: JavaExec, dependsOn: compileJava) {
        ext.outputDir = file("${buildDir}/delombok")
        outputs.dir outputDir

        classpath configurations.compile, configurations.compileOnly
        main = 'lombok.launch.Main'
        args 'delombok'
        sourceSets.main.java.srcDirs.each {
            inputs.dir it
            args it, '-d', outputDir
        }
    }

    tasks.withType(Javadoc) {
        dependsOn delombok
        source = delombok.outputDir
    }
}

project(':sample-server') {
    apply plugin: 'org.springframework.boot'

    dependencies {
        compile 'org.springframework.boot:spring-boot-starter-web'
        compile 'org.springframework.boot:spring-boot-starter-thymeleaf'
        compile 'org.springframework.boot:spring-boot-starter-security'
        compile 'org.springframework.session:spring-session-core'
        compile 'org.thymeleaf.extras:thymeleaf-extras-springsecurity4'
        compile 'org.slf4j:slf4j-api'
    }
}

project(':sample-client-spring') {
    apply plugin: 'org.springframework.boot'

    dependencies {
        compile 'org.springframework.boot:spring-boot-starter-web'
        compile 'org.springframework.boot:spring-boot-starter-thymeleaf'
        compile 'org.springframework.boot:spring-boot-starter-security'
        compile 'org.thymeleaf.extras:thymeleaf-extras-springsecurity4'
        compile 'org.slf4j:slf4j-api'
    }
}

project(':sample-client-struts2') {
    apply plugin: 'war'
    apply plugin: 'org.akhikhl.gretty'

    dependencies {
        compileOnly 'javax.servlet:javax.servlet-api'

        compile 'org.apache.struts:struts2-core'
        compile 'com.squareup.okhttp3:okhttp'
        compile 'com.fasterxml.jackson.core:jackson-databind'
        compile 'org.slf4j:slf4j-api'
        runtime 'ch.qos.logback:logback-classic'
        runtime 'org.apache.logging.log4j:log4j-to-slf4j'
    }

    gretty {
        httpPort = 8081
        servletContainer = 'tomcat8'
        contextPath = '/'
    }

    afterEvaluate {
        configurations.runtime.resolvedConfiguration.resolvedArtifacts.each {
            gretty.classPath it.file
        }
    }
}

import io.franzbecker.gradle.lombok.task.DelombokTask

group = 'com.github.sahara3'
version = '0.0.1'

buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
        mavenCentral()
    }

    dependencies {
        classpath 'io.franzbecker:gradle-lombok:1.10'
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.5.9.RELEASE'
    }
}

repositories {
    mavenCentral()
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'io.franzbecker.gradle-lombok'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

dependencyManagement {
    dependencies {
        dependency 'org.projectlombok:lombok:1.16.18'
        dependency 'javax.validation:validation-api:2.0.0.Final'
        dependency 'org.springframework.session:spring-session:1.3.1.RELEASE'
    }
}

dependencies {
    compileOnly 'org.projectlombok:lombok'
    compile 'javax.validation:validation-api'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-thymeleaf'
    compile 'org.springframework.boot:spring-boot-starter-security'
    compile 'org.springframework.session:spring-session'
    compile 'org.thymeleaf.extras:thymeleaf-extras-springsecurity4'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
}

def encoding = 'UTF-8'

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(AbstractCompile) {
    options.encoding = encoding
    options.compilerArgs += ['-Xlint:all', '-Xlint:-processing', '-Xlint:-fallthrough',
                             '-parameters']
}

task delombok(type: DelombokTask, dependsOn: compileJava) {
    ext.outputDir = file("${buildDir}/delombok")
    outputs.dir(outputDir)
    sourceSets.main.java.srcDirs.each {
        inputs.dir(it)
        args(it, '-d', outputDir)
    }
}

tasks.withType(Javadoc) {
    options.encoding = encoding
    options.charSet = encoding

    dependsOn delombok
    source = delombok.outputDir
}

jar {
    manifest {
        attributes('Implementation-Title': name,
                   'Implementation-Version': version)
    }
}

bootRepackage.enabled = false

// ===================================================================
//  Eclipse Settings
// ===================================================================
eclipse {
    project {
        natures 'org.eclipse.buildship.core.gradleprojectnature'
        buildCommand 'org.eclipse.buildship.core.gradleprojectbuilder'
    }

    classpath {
        defaultOutputDir = file("${buildDir}/eclipse")
        downloadSources = true
        downloadJavadoc = true

        file {
            whenMerged { classpath ->
                classpath.entries.findAll { it.kind == 'lib' }*.exported = true
            }
        }
    }
}

tasks.eclipse {
    dependsOn cleanEclipse
    doLast {
        def project_dir = (['..'] * project.depth).join('/')
        file('.settings/org.eclipse.buildship.core.prefs').append("""
            connection.gradle.distribution=GRADLE_DISTRIBUTION(WRAPPER)
            connection.project.dir=${project_dir}
            eclipse.preferences.version=1
        """.stripIndent())
    }
}

tasks.cleanEclipse {
    doLast {
        delete '.settings'
    }
}

// ===================================================================
//  Maven Publising
// ===================================================================
configurations {
    deployerJars
}

dependencies {
    deployerJars 'org.apache.maven.wagon:wagon-ssh:2.2'
}

uploadArchives {
    repositories.mavenDeployer {
        configuration = configurations.deployerJars
        repository(url: privateRepositoryUrl) {
            authentication(userName: privateRepositoryUsername,
                           password: privateRepositoryPassword)
        }
    }
}

task sourcesJar(type: Jar, dependsOn:classes) {
     classifier = 'sources'
     from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn:javadoc) {
     classifier = 'javadoc'
     from javadoc.destinationDir
}

artifacts {
     archives sourcesJar
     archives javadocJar
}
